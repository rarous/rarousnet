---
{:title "Renderování Webových komponent ve Workerech",
 :description "Minule jsme si ukázali, jak jsem předělal zobrazování WebMentions ve stránce pomocí webových komponent. Dneska si je vyrenderujeme v serverless funkci.",
 :author "Aleš Roubíček",
 :tags #{"moje práce", "cloudflare", "indieweb", "webmentions", "webcomponents", "gryphoon"},
 :published "2024-10-14T19:36:00.000"
 :syndication []}
---

Minule jsme si ukázali, jak jsem předělal "zobrazování WebMentions ve stránce pomocí webových komponent":[/weblog/2024/02/25/zobrazovani-webmentions-ve-strance].
Uteklo jen necelých 8 měsíců a konečně jsem se dostal k pokračování. Hurá!

Po zobrazování WebMentions jsem naimplementoval i "zobrazování starých komentářů k článkům":[/weblog/2023/12/27/komentare-jsou-zpet]
a taky přidávání nových. Proces u komentářů byl podobný jako u WebMentions, jen jsem místo služby
třetí strany využil KV((Key-Value)) už vytvořený pro WebMentions a k němu udělal API, ale tomu se pověnujeme někdy jindy.

Dneska jsem si konečně udělal čas na to přesunout renderování webových komponent pro výpis WebMentions a komentářů
do serverless/edge funkce. Tak pojďme na to!

## Cloudflare Pages

Zhruba před rokem jsem tento web přesunul do "Cloudflare Pages":[https://pages.dev].
Už před tím jsem víc jak 10 let používal Cloudflare CDN((Content Delivery Network)) jak **před** Clojure backendem,
tak pak před staticky vygenerovanou site. Důvod? Jejich CDN slouží jako proxy, která dělá spoustu on-the-fly optimalizací,
používá moderní crypto a kompresní algorytmy, chrání před DDoS útoky, cachuje stránky blízko uživatelům,
rychle adoptuje moderní protokoly a to všechno zadarmo. (*Konec neplacené reklamy.*)

Časem jsem přidal i "Cloudflare Worker":[https://workers.dev], který obsluhoval původní implementaci WebMentions k článkům.
Jenže to bylo příliš mnoho součástek (něco v AWS, něco v Cloudflare, managované přes Pulumi),
ze kterých jsem ten web dával dohromady. Nejen, že jsem jednoduchý chlapec, ale mám i rád jednoduchá řešení,
a tohle fakt jednoduchý nebylo. :)

Takže jsem se zbavil S3 v AWS, Workeru v Cloudflare a nahradil jsem je Cloudflare Pages. Krom toho, že je to příjemná
služba na friction less hostování statického obsahu, mají i vlastní CI((Continuous Integration)),
který stačí nasměrovat na vaše Git repo, říct jaký script se má spustit
(nebo "si vybrat ze seznamu spousty podporovaných frameworků":[https://developers.cloudflare.com/pages/framework-guides/]),
a kde najde výsledek, který má nasadit. Na svým webu jejich CI nevyužívám, protože mám historicky
CD((Continuous Deployment)) pipeline v CircleCI, která v Cloudflare není replikovatelná.

## Cloudflare Pages Functions

Další super vlastností Pages je, že to není jen statický hosting, ale můžete ho snadno rozhýbat pomocí
"Pages Functions":[https://developers.cloudflare.com/pages/functions/]. V rootu projektu si uděláte složku
`functions` a ta se publikuje jako Worker, který poslouchá na vybraných URLs.

Routing je FS((File System)) based. To znamená, že názvy složek a souborů se vám hezky mapují na URLs.
Např. soubor `functions/api/hello-world.js` poslouchá na URL `/api/hello-world`. To je jednoduchost, kterou dokážu ocenit.
1:1 mapování jsou fajn, ale často potřebujeme proměnný přímo v URL.

Functions na to mají tzv. parametry, které definujeme tak, že použijeme hranatý závorky v názvu souboru:
`/functions/users/[user].js` nám obslouží adresu `/users/rarous`, kde hodnotu `"rarous"` najdeme v `context.params.user`.
Pokud potřebuje odchytávat hlubší zanoření URL segmentů, máme tu `[[catchall]]` pattern.

Nebo můžeme myužít `_middleware.js`, který bude augmentovat všechny URLs v dané složce a podsložkách.
A to je přesně to, co nám poslouží pro renderování webových komponent.

## Renderovací middleware

Webové komponenty se vyznačují tím, že pro svůj životní cyklus vyžadují DOM((Document Object Model)).
Workery se vyznačují tím, že DOM nemají. Jinak mají "spoustu Webových APIs":[https://developers.cloudflare.com/workers/runtime-apis/web-standards/],
která mají s oknem browseru společná. No a když nám DOM ve workeru chybí, tak si ho tam přidáme.

O knihovně "Linkedom":[/weblog/2022/07/06/linkedom] už jsem tu psal, i když v trochu jiném kontextu - scrapování.
Ale ona vznikla právě kvůli **renderování webových komponent**, tak ji dneska použijeme na to, na co byla určená.
Linkedom má vyexportovaný ESM přímo pro používání ve Workerech - když tu píšu Worker, myslím tím jako Cloudflare Worker,
tak "Web Worker":[https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers] v browseru.

Takže si vytvoříme soubor `functions/weblog/_middleware.js`:

/--code javascript
import { parseHTML } from "linkedom/worker";

/**
 * @param {EventContext<Env>} context
 */
export async function onRequestGet(context) {
  const resp = await context.next();

  const contentType = resp.headers.get("content-type");
  if (!contentType?.startsWith("text/html")) return resp;

  const html = await resp.text();
  const { document, window } = parseHTML(html);

  // TODO: render web components

  return new Response(document.toString(), resp);
}
\--code

Pages Functions a Middleware musí exportovat asynchronní funkci `onRequest` nebo variantu specifickou pro konkrétní
HTTP verb. V našem případě chceme obsluhovat jen `GET` requesty, proto exportujeme funkci `onRequestGet`.
Tato funkce dostává `context`, ve kterém jsou informace o požadavku, prostředí funkce, předávaných datech
nebo parametry z URL.

Zavoláním `context.next()` dostaneme odpověď z dalšího handleru v řadě. Pokud vrácená odpověď nemá `Content-Type`
`text/html`, tak tu odpověď rovnou vrátíme, protože s ní nic dělat neumíme.

Pokud to je HTML, tak si z něj uděláme DOM. Funkce `parseHTML` vrací globální scope z browseru, tj. implementaci
rozhranní `Window`. Implementaci oživení webových komponent zatím přeskočíme. Nakonec serializujeme DOM do HTML a vrátíme
ho v odpovědi. Když předáme konstruktoru `Response` jako druhý parametr původní response `resp`, převezme od ní hlavičky,
což se nám hodí.

Takovýto middleware je zatím jen overhead v podobě parsování a serializace DOMu, se kterým nic neděláme. Ale je to dobrý
odrazový můstek, pro to, čeho potřebujeme dosáhnout.

## Příprava webových komponent

Když se vrátím k článku "zobrazování WebMentions ve stránce":[/weblog/2024/02/25/zobrazovani-webmentions-ve-strance],
skončili jsme definicí webové komponenty, která z nadhledu vypadala nějak tak:

/--code javascript
class WebMentions extends HTMLElement {}

customElements.define("rarous-webmentions", WebMentions);
\--code

Tohle je klasický vzor, jak definovat "vlastní element":[https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements],
tj. jak vlastní značce přiřadit ECMAScriptovou třídu a definovat její chování. Když vložíme script do stránky,
tak se nám automaticky zaregistruje, což je fajn. Ale taky je to problém, když cheme komponentu unit-testovat nebo
třeba použít ve Workeru.

Krom toho, že se komponenta sama registruje, tak taky očekává globálně dostupné `HTMLElement` a `customElements`,
což ve většině browserů máme, ale ve Workerech ne. Proto budeme muset udělat lehký refactoring, který nám ze scriptu
udělá modul, automatickou registraci provede, jen pokud je modul importovaný v browseru, a z globálního scope nám
udělá lexikální:

/--code javascript
/**
 * @param {Window} window
 * @returns {typeof WebMentions}
 */
export function defWebMentions({ HTMLElement, customElements }) {
  class WebMentions extends HTMLElement {
    static register(tagName = "gryphoon-webmentions") {
      this.tagName = tagName;
      customElements.define(tagName, this);
    }

    set data(items) {
      // apply template to injected data
    }
  }
  return WebMentions;
}

// auto-register components when in browser env with customElements support
if (globalThis.window?.customElements) {
  defWebMentions(window).register();
}
\--code

Protože je tohle užitečný vzor, který často opakuju, vytvořil jsem si ve Webstormu Live Template,
která psaní definice usnadní. Najdete ji v tomto gistu:
"Isomorphic Web Component definition, Live Template for Webstorm":[https://gist.github.com/rarous/b4dff9466392bb05ea1aea4fad857a48]

## Zapojení webové komponenty do DOMu ve Workeru

Tak, teď máme webovou komponentu připravenou na to, aby šla použít v různých kontextech, bez globálních závislostí,
a můžeme ji začít používat v našem middleware:

/--code javascript
import { parseHTML } from "linkedom/worker";
import { defWebMentions } from "@rarousnet/website/gryphoon.js";

/**
 * @param {KVNamespace} weblog
 * @param {string} url
 * @return {Promise<{webmentions: Array}>}
 */
async function getDetail(weblog, url) {
  const payload = await weblog.get(url, "json");
  return Object.assign({ webmentions: [] }, payload);
}

/**
 * @param {EventContext<Env>} context
 */
export async function onRequestGet(context) {
  const resp = await context.next();

  const contentType = resp.headers.get("content-type");
  if (!contentType?.startsWith("text/html")) return resp;

  const html = await resp.text();
  const { document, window } = parseHTML(html);

  const WebMentions = defWebMentions(window);
  WebMentions.register();

  const webmentions = document.querySelector(WebMentions.tagName);
  const data = await getDetail(context.env.weblog, context.request.url);
  webmentions.data = data.webmentions;

  return new Response(document.toString(), resp);
}
\--code

Naimportujeme naši funkci pro definici custom elementu. Přidáme si funkci, která se snaží načíst WebMentions z KV store.
V handleru provedeme registraci custom elementu do DOM. Potom si náš element najdeme podle zaregistrované značky,
vytáhneme si data z KV store a nastavíme je pomocí vlastnosti `data`, která způsobí, že se na každý prvek v kolekci
aplikuje šablona a nakonec se výsledné elementy vloží do DOMu.
"Mechaniku jsem popsal už v minulém článku":[/weblog/2024/02/25/zobrazovani-webmentions-ve-strance].

A tím máme renderování hotové!

## Závěr

Tenhle článek měl být původně "přednáška na FrontKonu":[https://www.frontkon.cz/#ales-roubicek], ale její delivery
se mi úplně nevyvedla dle mých představ. Únava z celodenního hraní v chillout-zóně spojená s time-pressem,
zvládnout to celý za 20 min, udělali svoje.

Cílem bylo představit techniku, kterou jsem zatím nikde jinde neviděl, jak vytvářet definice vlastních elemntů,
které můžete používat v různých kontextech (běhových prostředích). Viděl jsem "řešení, které definuje čistě serverové
webové komponenty":[https://www.mayank.co/blog/server-side-custom-elements], tj. definujete si jinou implementaci
vlastní značky pro server, než máte pro klienta. Což může mít takysvoje výhody a ve výsledku je možné obě řešení kombinovat.

Osobně nevidím nutnost oživovat na serveru všechny webový komponenty, který ve stránce máte, ale jen ty, u kterých to
dává smysl a má přínos pro uživatele. Tím, že se mi do toho nemotá žádný framework, můžu se snadno rozhodnout,
jakou strategii zvolit.

Tohle řešení zatím nefunguje pro komponenty, které mají ShadowDOM. Ještě chybí standardizované mechanismy,
jak toho dosáhnout.
