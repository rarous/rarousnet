---
{:id 451,
 :title "Jak teda s těma výjimkama v busines logice?",
 :description "Jak to vidím s výjimkama v business logice já.",
 :author "Aleš Roubíček",
 :tags #{"moje práce", "cleancode", "functional", "fsharp"},
 :published "2013-05-17T14:11:33.710"
 :syndication
 ["https://twitter.com/alesroubicek/status/473880443415461888"
  "https://twitter.com/alesroubicek/status/681733297588797440"]}
---

Na develu se rozvíjí debaty o tom, zda je zpátečnické odrazovat od vyhazování výjimek.
Já patřím mezi zpátečníky. :) Tady je moje odpověď, kterou je IMO škoda nemít veřejně dostupnou,
takže ji publikuju i tady na blogu.

Na  začátek je dobré se opřít o nějakou autoritu, proto tady pro začátek ocituju
<a href="http://blogs.msdn.com/b/kcwalina/archive/2005/03/16/396787.aspx">.net Framework Design Guidelines doporučení k výjimkám</a>:

<ol>
<li>Nevracejte chybové kódy. K tomuto účelu jsou určeny výjimky.
<li>Vyhazujte výjimky pokud dojde k běhové chybě. Pokud člen nemůže úspěšně provést úkol za nějž nese zodpovědnost, mělo by to být považováno za běhovou chybu a měla by být vyhozena výjimka.
<li>Pokud se dostanete do stavu, kterému nepomůže žádné ošetření výjimky, proveďtě ukončení procesu pomocí <code>Environment.FailFast()</code>.
<li>Nepoužívejte výjimky k formálnímu řízení toku programu. S výjimkou systémových selhání by vždy měl existovat způsob jak se vyhnout vyhazování výjimek.
<li>Zvažte důsledky vyhozené výjimky na výkon.
<li>Vždy zdokumentujte všechny výjimky vyhazované veřejnými členy z důvodu porušení jejich kontraktu.
<li>Nemějte veřejné členy, které mají nebo nemají vyhazovat výjimky na základě nějakého parametru. <code>Type GetType(string name, bool throwOnError)</code>
<li>Nemějte veřejné členy které vracejí výjimku jako návratovou hodnotu nebo out parametr.
<li>Nastavte všechny relevatní vlastnoti vyhazované výjimky.
<li>Preferujte užití systémových výjimek před vlastními.
<li>Vlastní výjimky vyhazujte v případě, že vyžadují odlišný způsob ošetření než existující typy výjimek.
<li>Nikdy nevytvářejte vlastní typ výjimky, jen proto, aby váš team měl nějakou vlastní výjimku.
<li>Vyhazujte co nejkonkrétnější výjimky.
<li>Nevracejte chybové kódy z obav o výkonostní dopady při vyhazování výjimek.
<li>Používejte vzory jako TryParse, které snižují negativní dopady na výkon způsobené vyhazováním výjimek.
</ol>

Z texu je zřejmé, že vyhazování výjimek má své opodstatnění. Důležité je však v jakých scénářích
se výjimky vyhazovat mají a v jakých ne.

Často se tu objevují příklady s validací vstupních hodnot nebo třeba autentikace uživatele. Začněme validátorem:

Primární zodpovědností validátoru je validovat hodnoty. Je nevalidní hodnota příčinou nemožnosti
korektní práce validátoru (důvodem k vyhození výjimky)? Není (viz bod <code>2</code>).
Můžeme to řešit vracením primitivy jako je <code>bool</code>. Já si však myslím, že taková hodnota je nedostatečná.
Potřebujeme výsledek validace zpropagovat někam, kde se s ním bude dále pracovat.
Vyhodíme tedy výjimku a tu pak odchytíme? Tím se ale dostáváme k bodu <code>4</code>.
Lepším řešením je definovat komplexní návratový typ:

/--code fsharp
type ValidationResult =
  | Valid
  | Invalid of ValidationError list
\--code

Pokračujme s autentikací uživatele. Běžnou praxí je vyhazování <code>SecurityException</code>
pokud se nepovede uživatele autentikovat. Výjimka se pak nechá probublat do UI vrstvy,
kde se ošetří a uživateli se zobrazí hláška, že zadal špatné jméno nebo heslo.
Opět však jde o porušení 4. bodu. Autentikace tam může vracet opět <code>bool</code>
nebo rovnou instanci <code>User</code> a v případě nevydařené autentikace <code>null</code>.
Tím se zbavíme bezpečnostních výjimek, ale zase si zavedeme potenciální chybu v podobě
<code title="NullReferenceException">NRE</code>...
Proto si opět myslím, že by se měl vracet adekvátní typ:

/--code fsharp
type AuthenticationResult =
  | NotAuthenticated
  | Authenticated of User
\--code

Autentikační modul samozřejmě může vyhazovat výjimky, ale většinou budou spojené
s nefungující infrastrukturou (LDAP, SQL nebo jinej auth provider),
to je totiž validní důvod, proč nemůže autentikace doběhnout.

