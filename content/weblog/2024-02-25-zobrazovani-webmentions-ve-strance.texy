---
{:title "Zobrazování Webmentions ve stránce",
 :description "Je tomu zhruba rok, co jsem na blog přidal podporu Webmentions. Dnes si ukážeme jak jsem implementoval jejich zobrazování.",
 :author "Aleš Roubíček",
 :tags #{"moje práce", "indieweb", "webmentions", "lit-html", "webcomponents", "gryphoon"},
 :published "2024-02-25T12:20:00.000"
 :syndication
  ["https://indieweb.social/@alesroubicek/111992343119016847",
   "https://twitter.com/alesroubicek/status/1761745005322866712"]}
---

Když jsem zhruba před rokem "přidával na blog podporu Webmention":[/weblog/2024/02/18/webmention-syndikace.html],
začal jsem celkem snadno. Ve stránce jsem si udělal inline `<script>`,
importoval do něj lit-html:[/weblog/2021/05/04/lit-html.html],
`fetch`nul:[https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data#the_fetch_api]
v něm data a na ně aplikoval `lit-html` šablonu. `view = f(data)` ve své nejčistší podobě.

/--code html
<section id="webmentions"></section>
<script type="module">
  import { render, html } from "https://cdn.skypack.dev/lit-html?min";

  function groupByType(webmentions) {
    const byType = new Map();
    for (const post of webmentions) {
      const key = post["wm-property"];
      const values = byType.get(key) ?? [];
      values.push(post);
      byType.set(key, values);
    }
    return byType;
  }

  function groupTemplate(type, title, items) {
    if (!items?.length) return;
    return html`
      <section class="webmentions">
        <p><data value="${items.length}">${items.length}x ${title}</data></p>
        <ul>
          ${items.map(
            (item) => html`
              <li>
                <a
                  class="${type}"
                  href="${item.url}"
                  title="${item.author.name}"
                >
                  <time datetime="${item.published}"></time>
                  <img
                    alt="${item.author.name}"
                    src="${item.author.photo}"
                    width="32"
                    height="32"
                    loading="lazy"
                    decoding="async"
                  />
                </a>
              </li>
            `,
          )}
        </ul>
      </section>
    `;
  }

  function webmentionsTemplate(webmentions) {
    if (!webmentions?.length) return;
    const byType = groupByType(webmentions);
    return html`
      <h2>Reakce v síti</h2>
      ${groupTemplate("u-like", "se líbilo", byType.get("like-of"))}
      ${groupTemplate("u-repost", "přeposláno dál", byType.get("repost-of"))}
    `;
  }

  async function main({ url, webmentionsRoot }) {
    const resp = await fetch(`/api/v1/weblog?${new URLSearchParams({ url })}`);
    if (!resp.ok) return;
    const { webmentions } = await resp.json();
    render(webmentionsTemplate(webmentions), webmentionsRoot);
  }

  await main({
    url: location.href,
    webmentionsRoot: document.getElementById("webmentions"),
  });
</script>
\--code

Měl jsem rychle hotovo a fungovalo to. Deset měsíců jsem na to nešahal, ale pak jsem si chtěl ověřit,
jak by to vypadalo, kdybych z toho udělal "Web komponentu":[https://developer.mozilla.org/en-US/docs/Web/API/Web_components]
bez závislostí.
Z `lit-html` šablon jsem udělal markup v `<template>` a kód komponenty extrahoval do samostatného ESM((ECMAScript Module)).

/--code html
<rarous-webmentions
  api-endpoint="https://www.rarous.net/api/v1/weblog"
  id="webmentions"
>
  <h2>Reakce v síti</h2>
  <section class="webmentions" id="like-of">
    <p>
      <data>Líbilo se</data>
    </p>
    <ul class="items">
      <li>Načítají se data&hellip;</li>
    </ul>
  </section>
  <section class="webmentions" id="repost-of">
    <p>
      <data>Přeposláno dál</data>
    </p>
    <ul class="items">
      <li>Načítají se data&hellip;</li>
    </ul>
  </section>
  <template>
    <li>
      <a>
        <time datetime=""></time>
        <img alt="" src="" width="32" height="32" loading="lazy" decoding="async" />
      </a>
    </li>
  </template>
</rarous-webmentions>

<script type="module" src="/assets/esm/webmentions.js"></script>
\--code

A kód web komponenty:

/--code javascript
function groupByType(webmentions) {
  const byType = new Map();
  for (const post of webmentions) {
    const key = post["wm-property"];
    const values = byType.get(key) ?? [];
    values.push(post);
    byType.set(key, values);
  }
  return byType;
}

/**
 * @param {Element} itemTemplate
 * @param {*} item
 * @param {Element} section
 * @return {Element}
 */
function webmentionLink(itemTemplate, item, section) {
  const link = itemTemplate.querySelector("a");
  link.href = item.url;
  link.title = item.author.name;
  link.classList.add(section.id);
  return link;
}

/**
 * @param {Element} itemTemplate
 * @param {*} item
 * @return {Element}
 */
function webmentionDate(itemTemplate, item) {
  const time = itemTemplate.querySelector("time");
  time.dateTime = item.published ?? item["wm-received"];
  return time;
}

/**
 * @param {Element} itemTemplate
 * @param {*} item
 * @return {Element}
 */
function webmentionAvatar(itemTemplate, item) {
  const img = itemTemplate.querySelector("img");
  img.alt = item.author.name;
  img.src = item.author.photo;
  return img;
}

/**
 * @param {Element} section
 * @param {Array} items
 * @return {Element}
 */
function webmentionsCounter(section, items) {
  const counter = section.querySelector("data");
  counter.value = items.length;
  counter.insertAdjacentText("beforeend", ` ${items.length}x`);
  return counter;
}

/**
 * @param {Element} section
 * @param {Element} template
 * @param {Array} items
 */
function injectItems(section, template, items) {
  if (!items?.length) {
    return section.remove();
  }
  webmentionsCounter(section, items);
  const list = section.querySelector(".items");
  const listItems = document.createDocumentFragment();
  for (const item of items) {
    const { content } = template.cloneNode(true);
    webmentionLink(content, item, section);
    webmentionDate(content, item);
    webmentionAvatar(content, item);
    listItems.appendChild(content);
  }
  list.replaceChildren(listItems);
}

class WebMentions extends HTMLElement {
  async connectedCallback() {
    const likesOf = this.querySelector("#like-of");
    const repostsOf = this.querySelector("#repost-of");
    const template = this.querySelector("template");
    const apiEndpoint = this.getAttribute("api-endpoint") ?? "/api/v1/weblog";
    const url = this.getAttribute("href") ?? location.href;
    const resp = await fetch(`${apiEndpoint}?${new URLSearchParams({ url })}`);
    if (!resp.ok) {
      this.remove();
      return;
    }
    const { webmentions } = await resp.json();
    if (!webmentions.length) {
      this.remove();
    }
    const byType = groupByType(webmentions);
    injectItems(likesOf, template, byType.get("like-of"));
    injectItems(repostsOf, template, byType.get("repost-of"));
  }
}

customElements.define("rarous-webmentions", WebMentions);
\--code

Na první pohled je to o dost víc kódu. Na druhý pohled jsme se zbavili ~2KiB (gzip) závislosti
a doplnili nějaké "JSDoc komentáře":[https://jsdoc.app/]. Dalším rysem je, že jsme přesunuli znalost,
z jaké URL((Uniform Resource Locator)) se mají data načíst, z JS((JavaScript)) kódu do markupu (pomocí atributu `api-endpoint`).

Také můžeme explicitně nastavit URL článku (atribut `href`), pro který chceme Webmentions zobrazovat.
Tím se dá komponenta znovupoužít na jiném webu, nebo k zobrazování dat z jiného webu, nebo
víc článků na jedné stránce. Prostě se z toho stala komponenta, kterou jde snadno použít v různých kontextech.

Šablona se přesunula z ES((ECMAScript)) šablonovaných literálů do HTML((Hypertext Markup Language)).
V první řadě máme vytažený HTML kód, který **se zobrazí hned, jak do browseru doteče**
a nemusí se čekat na to, až se stáhne a zpracuje JavaScript.
Ve chvíli, kdy JavaScript naběhne a stáhne nám data, tak se nám doplní očekávané tváře
reagujících - aplikací dat na kód v `<template>`, nebo kód z DOM((Document Object Model))u odstraníme,
pokud nemáme co zobrazovat.

Závěr
=====

Ačkoliv tady moje iterování nad touto komponentou neskončilo, myslím, že i tak je to zajímavá ukázka,
jak snadno vyprototypovat kus UI((User Interface)) pomocí `lit-html` a pak to převést na web komponentu,
která nepotřebuje žádné závislosti. 

Příště si ukážeme, jak jsem implementoval zobrazování komentářů a další iterací udělal
z komponenty čistě zobrazovací. A dostane se i na serverové renderování (aka SSR((Server-Side Rendering))).
"Přihlaste se k odběru RSS((Really Simple Syndication))":[https://feeds.feedburner.com/rarous-weblog]
nebo mě "sledujte na Mastodonu":[https://indieweb.social/@alesroubicek], aby vám to neuteklo.

